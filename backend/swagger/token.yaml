swagger: "2.0"
info:
  version: 0.0.1
  title: FlexiWAN
paths:
  /tokens:
    get:
      summary: Returns all tokens
      tags: 
      - 'Tokens'
      produces:
      - application/json
      security:
      - JWT: []
      responses:
        200:
          description: All tokens successfully returned
          schema:
            $ref: '#components/schemas/GetTokens'
        403:
          description: User not authorized to call this API
          schema:
            $ref: '#components/schemas/AuthError'
        404:
          description: Token does not exist
  /tokens/{tokenID}:
    get:
      summary: Returns a single token by ID
      tags: 
      - 'Tokens'
      produces:
      - application/json
      parameters:
        - in: path 
          description: ID of the token
          name: tokenID
          required: true
          type: string
      security:
      - JWT: []
      responses:
        200:
          description: All tokens successfully returned
          schema:
            $ref: '#components/schemas/GetToken'
        403:
          description: User not authorized to call this API
          schema:
            $ref: '#components/schemas/AuthError'
    put:
      summary: Updates details of a single token by its id
      tags:
      - 'Tokens'
      produces:
      - application/json
      parameters:
        - in: path 
          description: ID of the token to update
          name: tokenID
          required: true
          type: string
        - in: body
          description: Updated details of the token
          name: body
          required: true
          schema:
            $ref: '#components/schemas/UpdToken'
      security:
      - JWT: []
      responses:
        200:
          description: Token updated
        403:
          description: User not authorized to call this API
          schema:
            $ref: '#components/schemas/AuthError'
        404:
          description: Token does not exist
    delete:
      description: Deletes a single token
      tags:
      - 'Tokens'
      parameters:
        - in: path
          description: ID of token to delete
          name: tokenID
          required: true
          type: string
      security:
      - JWT: []
      responses:
        200:
          description: Token deleted
          schema:
            $ref: '#components/schemas/GetToken'
        403:
          description: User not authorized to call this API
          schema:
            $ref: '#components/schemas/AuthError'
        404:
          description: Token does not exist

components:
  $ref: './components/tokenComponents.yaml'
